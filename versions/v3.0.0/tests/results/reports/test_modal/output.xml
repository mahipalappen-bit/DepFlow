<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.1.1 (Python 3.9.6 on darwin)" generated="20250923 08:18:26.094" rpa="false" schemaversion="4">
<suite id="s1" name="02 Dependency Crud Tests" source="/Users/mmoola/Cursor/Dependency Management App/tests/test_suites/02_dependency_crud_tests.robot">
<kw name="Test Mode Suite Setup" library="depflow_keywords" type="SETUP">
<doc>Setup using test mode authentication</doc>
<kw name="Open DepFlow Application" library="depflow_keywords">
<doc>Opens the DepFlow application in browser</doc>
<kw name="Open Browser" library="SeleniumLibrary">
<arg>${APP_URL}</arg>
<arg>${BROWSER}</arg>
<doc>Opens a new browser instance to the optional ``url``.</doc>
<msg timestamp="20250923 08:18:26.286" level="INFO">Opening browser 'Chrome' to base url 'http://localhost:3000'.</msg>
<status status="PASS" starttime="20250923 08:18:26.286" endtime="20250923 08:18:28.538"/>
</kw>
<kw name="Maximize Browser Window" library="SeleniumLibrary">
<doc>Maximizes current browser window.</doc>
<status status="PASS" starttime="20250923 08:18:28.539" endtime="20250923 08:18:28.908"/>
</kw>
<kw name="Set Selenium Implicit Wait" library="SeleniumLibrary">
<arg>${IMPLICIT_WAIT}</arg>
<doc>Sets the implicit wait value used by Selenium.</doc>
<status status="PASS" starttime="20250923 08:18:28.908" endtime="20250923 08:18:28.909"/>
</kw>
<kw name="Wait Until Page Contains Element" library="SeleniumLibrary">
<arg>${LANDING_PAGE_LOGO}</arg>
<arg>timeout=30s</arg>
<doc>Waits until the element ``locator`` appears on the current page.</doc>
<status status="PASS" starttime="20250923 08:18:28.909" endtime="20250923 08:18:28.924"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>3s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:31.926" level="INFO">Slept 3 seconds</msg>
<status status="PASS" starttime="20250923 08:18:28.924" endtime="20250923 08:18:31.927"/>
</kw>
<status status="PASS" starttime="20250923 08:18:26.286" endtime="20250923 08:18:31.927"/>
</kw>
<kw name="Test Mode Admin Login" library="depflow_keywords">
<doc>Quick admin login using test mode</doc>
<kw name="Test Mode Login" library="depflow_keywords">
<arg>admin</arg>
<doc>Login using test mode bypass - no modal interaction required</doc>
<kw name="Wait Until Page Contains Element" library="SeleniumLibrary">
<arg>${LANDING_PAGE_LOGO}</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` appears on the current page.</doc>
<status status="PASS" starttime="20250923 08:18:31.928" endtime="20250923 08:18:31.945"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:32.946" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:31.945" endtime="20250923 08:18:32.947"/>
</kw>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof window.DepFlow.testModeLogin === 'function') {</arg>
<arg>window.DepFlow.testModeLogin('${user_type}');</arg>
<arg>} else {</arg>
<arg>console.error('Test mode login function not available');</arg>
<arg>}</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:32.948" level="INFO">Executing JavaScript:
if (typeof window.DepFlow.testModeLogin === 'function') {window.DepFlow.testModeLogin('admin');} else {console.error('Test mode login function not available');}
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:32.947" endtime="20250923 08:18:32.968"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:34.969" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20250923 08:18:32.968" endtime="20250923 08:18:34.969"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${DASHBOARD_PAGE}</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20250923 08:18:34.970" endtime="20250923 08:18:34.998"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${USER_PANEL}</arg>
<arg>timeout=5s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20250923 08:18:34.998" endtime="20250923 08:18:35.010"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Test Mode Login Completed for ${user_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250923 08:18:35.010" level="INFO">Test Mode Login Completed for admin</msg>
<status status="PASS" starttime="20250923 08:18:35.010" endtime="20250923 08:18:35.010"/>
</kw>
<status status="PASS" starttime="20250923 08:18:31.928" endtime="20250923 08:18:35.010"/>
</kw>
<status status="PASS" starttime="20250923 08:18:31.927" endtime="20250923 08:18:35.010"/>
</kw>
<status status="PASS" starttime="20250923 08:18:26.286" endtime="20250923 08:18:35.010"/>
</kw>
<test id="s1-t1" name="TC014 - Open Add Dependency Modal" line="37">
<kw name="Test Mode Test Setup" library="depflow_keywords" type="SETUP">
<doc>Individual test setup using test mode</doc>
<kw name="Test Mode Reset" library="depflow_keywords">
<doc>Complete app state reset for clean test environment</doc>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof window.DepFlow.testModeReset === 'function') {</arg>
<arg>window.DepFlow.testModeReset();</arg>
<arg>} else {</arg>
<arg>console.error('Test mode reset function not available');</arg>
<arg>}</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:35.012" level="INFO">Executing JavaScript:
if (typeof window.DepFlow.testModeReset === 'function') {window.DepFlow.testModeReset();} else {console.error('Test mode reset function not available');}
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:35.011" endtime="20250923 08:18:35.016"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:36.018" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:35.016" endtime="20250923 08:18:36.018"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Test Mode Reset Completed</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250923 08:18:36.019" level="INFO">Test Mode Reset Completed</msg>
<status status="PASS" starttime="20250923 08:18:36.018" endtime="20250923 08:18:36.019"/>
</kw>
<status status="PASS" starttime="20250923 08:18:35.011" endtime="20250923 08:18:36.019"/>
</kw>
<kw name="Test Mode Admin Login" library="depflow_keywords">
<doc>Quick admin login using test mode</doc>
<kw name="Test Mode Login" library="depflow_keywords">
<arg>admin</arg>
<doc>Login using test mode bypass - no modal interaction required</doc>
<kw name="Wait Until Page Contains Element" library="SeleniumLibrary">
<arg>${LANDING_PAGE_LOGO}</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` appears on the current page.</doc>
<status status="PASS" starttime="20250923 08:18:36.019" endtime="20250923 08:18:36.028"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:37.030" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:36.029" endtime="20250923 08:18:37.030"/>
</kw>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof window.DepFlow.testModeLogin === 'function') {</arg>
<arg>window.DepFlow.testModeLogin('${user_type}');</arg>
<arg>} else {</arg>
<arg>console.error('Test mode login function not available');</arg>
<arg>}</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:37.031" level="INFO">Executing JavaScript:
if (typeof window.DepFlow.testModeLogin === 'function') {window.DepFlow.testModeLogin('admin');} else {console.error('Test mode login function not available');}
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:37.030" endtime="20250923 08:18:37.041"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:39.043" level="INFO">Slept 2 seconds</msg>
<status status="PASS" starttime="20250923 08:18:37.041" endtime="20250923 08:18:39.043"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${DASHBOARD_PAGE}</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20250923 08:18:39.043" endtime="20250923 08:18:39.052"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${USER_PANEL}</arg>
<arg>timeout=5s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20250923 08:18:39.052" endtime="20250923 08:18:39.059"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Test Mode Login Completed for ${user_type}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250923 08:18:39.059" level="INFO">Test Mode Login Completed for admin</msg>
<status status="PASS" starttime="20250923 08:18:39.059" endtime="20250923 08:18:39.059"/>
</kw>
<status status="PASS" starttime="20250923 08:18:36.019" endtime="20250923 08:18:39.059"/>
</kw>
<status status="PASS" starttime="20250923 08:18:36.019" endtime="20250923 08:18:39.059"/>
</kw>
<status status="PASS" starttime="20250923 08:18:35.011" endtime="20250923 08:18:39.059"/>
</kw>
<kw name="Ensure All Modals Closed" library="depflow_keywords">
<doc>Ensures all modals are closed before proceeding</doc>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof closeLoginModal === 'function') { closeLoginModal(); }</arg>
<arg>if (typeof closeAddDependencyModal === 'function') { closeAddDependencyModal(); }</arg>
<arg>if (typeof closeEditDependencyModal === 'function') { closeEditDependencyModal(); }</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:39.060" level="INFO">Executing JavaScript:
if (typeof closeLoginModal === 'function') { closeLoginModal(); }if (typeof closeAddDependencyModal === 'function') { closeAddDependencyModal(); }if (typeof closeEditDependencyModal === 'function') { closeEditDependencyModal(); }
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:39.060" endtime="20250923 08:18:39.062"/>
</kw>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>document.querySelectorAll('.modal').forEach(modal =&gt; {</arg>
<arg>modal.style.display = 'none';</arg>
<arg>modal.classList.remove('show');</arg>
<arg>});</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:39.063" level="INFO">Executing JavaScript:
document.querySelectorAll('.modal').forEach(modal =&gt; {modal.style.display = 'none';modal.classList.remove('show');});
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:39.062" endtime="20250923 08:18:39.067"/>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<arg>Press Keys</arg>
<arg>None</arg>
<arg>ESCAPE</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<kw name="Press Keys" library="SeleniumLibrary">
<arg>None</arg>
<arg>ESCAPE</arg>
<doc>Simulates the user pressing key(s) to an element or on the active browser.</doc>
<msg timestamp="20250923 08:18:39.068" level="INFO">Sending key(s) ('ESCAPE',) to page.</msg>
<msg timestamp="20250923 08:18:39.068" level="INFO">Pressing special key ESCAPE to browser.</msg>
<msg timestamp="20250923 08:18:39.068" level="INFO">Releasing special key ESCAPE.</msg>
<status status="PASS" starttime="20250923 08:18:39.067" endtime="20250923 08:18:39.074"/>
</kw>
<status status="PASS" starttime="20250923 08:18:39.067" endtime="20250923 08:18:39.074"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:40.076" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:39.074" endtime="20250923 08:18:40.077"/>
</kw>
<status status="PASS" starttime="20250923 08:18:39.059" endtime="20250923 08:18:40.077"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:41.080" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:40.077" endtime="20250923 08:18:41.080"/>
</kw>
<kw name="Click Element" library="SeleniumLibrary">
<arg>${ADD_DEPENDENCY_BUTTON}</arg>
<doc>Click the element identified by ``locator``.</doc>
<msg timestamp="20250923 08:18:41.081" level="INFO">Clicking element 'xpath://button[contains(@onclick, 'showAddDependencyModal')]'.</msg>
<status status="PASS" starttime="20250923 08:18:41.080" endtime="20250923 08:18:41.133"/>
</kw>
<kw name="Wait Until Element Is Visible" library="SeleniumLibrary">
<arg>${ADD_EDIT_MODAL}</arg>
<arg>timeout=10s</arg>
<doc>Waits until the element ``locator`` is visible.</doc>
<status status="PASS" starttime="20250923 08:18:41.133" endtime="20250923 08:18:41.149"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${DEP_NAME_FIELD}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20250923 08:18:41.162" level="INFO">Element 'id:addName' is displayed.</msg>
<status status="PASS" starttime="20250923 08:18:41.149" endtime="20250923 08:18:41.162"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${DEP_DESCRIPTION_FIELD}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20250923 08:18:41.179" level="INFO">Element 'id:addDescription' is displayed.</msg>
<status status="PASS" starttime="20250923 08:18:41.162" endtime="20250923 08:18:41.179"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${DEP_TEAM_SELECT}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20250923 08:18:41.207" level="INFO">Element 'id:addTeam' is displayed.</msg>
<status status="PASS" starttime="20250923 08:18:41.179" endtime="20250923 08:18:41.208"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${DEP_STATUS_SELECT}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20250923 08:18:41.224" level="INFO">Element 'id:addStatus' is displayed.</msg>
<status status="PASS" starttime="20250923 08:18:41.208" endtime="20250923 08:18:41.224"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${SAVE_BUTTON}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<msg timestamp="20250923 08:18:41.423" level="INFO" html="true">&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td colspan="3"&gt;&lt;a href="selenium-screenshot-1.png"&gt;&lt;img src="selenium-screenshot-1.png" width="800px"&gt;&lt;/a&gt;</msg>
<msg timestamp="20250923 08:18:41.423" level="FAIL">The element 'xpath://button[@type='submit' and contains(@class, 'btn-submit')]' should be visible, but it is not.</msg>
<status status="FAIL" starttime="20250923 08:18:41.224" endtime="20250923 08:18:41.428"/>
</kw>
<kw name="Element Should Be Visible" library="SeleniumLibrary">
<arg>${CANCEL_BUTTON}</arg>
<doc>Verifies that the element identified by ``locator`` is visible.</doc>
<status status="NOT RUN" starttime="20250923 08:18:41.428" endtime="20250923 08:18:41.428"/>
</kw>
<kw name="Test Mode Test Teardown" library="depflow_keywords" type="TEARDOWN">
<doc>Individual test teardown using test mode</doc>
<kw name="Test Mode Reset" library="depflow_keywords">
<doc>Complete app state reset for clean test environment</doc>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof window.DepFlow.testModeReset === 'function') {</arg>
<arg>window.DepFlow.testModeReset();</arg>
<arg>} else {</arg>
<arg>console.error('Test mode reset function not available');</arg>
<arg>}</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:41.428" level="INFO">Executing JavaScript:
if (typeof window.DepFlow.testModeReset === 'function') {window.DepFlow.testModeReset();} else {console.error('Test mode reset function not available');}
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:41.428" endtime="20250923 08:18:41.432"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:42.433" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:41.432" endtime="20250923 08:18:42.433"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Test Mode Reset Completed</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250923 08:18:42.434" level="INFO">Test Mode Reset Completed</msg>
<status status="PASS" starttime="20250923 08:18:42.434" endtime="20250923 08:18:42.434"/>
</kw>
<status status="PASS" starttime="20250923 08:18:41.428" endtime="20250923 08:18:42.434"/>
</kw>
<status status="PASS" starttime="20250923 08:18:41.428" endtime="20250923 08:18:42.434"/>
</kw>
<doc>Test opening the Add Dependency modal</doc>
<tag>modal</tag>
<tag>smoke</tag>
<tag>ui</tag>
<status status="FAIL" starttime="20250923 08:18:35.010" endtime="20250923 08:18:42.434">The element 'xpath://button[@type='submit' and contains(@class, 'btn-submit')]' should be visible, but it is not.</status>
</test>
<kw name="Test Mode Suite Teardown" library="depflow_keywords" type="TEARDOWN">
<doc>Teardown using test mode</doc>
<kw name="Test Mode Reset" library="depflow_keywords">
<doc>Complete app state reset for clean test environment</doc>
<kw name="Execute Javascript" library="SeleniumLibrary">
<arg>if (typeof window.DepFlow.testModeReset === 'function') {</arg>
<arg>window.DepFlow.testModeReset();</arg>
<arg>} else {</arg>
<arg>console.error('Test mode reset function not available');</arg>
<arg>}</arg>
<doc>Executes the given JavaScript code with possible arguments.</doc>
<msg timestamp="20250923 08:18:42.436" level="INFO">Executing JavaScript:
if (typeof window.DepFlow.testModeReset === 'function') {window.DepFlow.testModeReset();} else {console.error('Test mode reset function not available');}
Without any arguments.</msg>
<status status="PASS" starttime="20250923 08:18:42.436" endtime="20250923 08:18:42.441"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>1s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20250923 08:18:43.443" level="INFO">Slept 1 second</msg>
<status status="PASS" starttime="20250923 08:18:42.441" endtime="20250923 08:18:43.443"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>Test Mode Reset Completed</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20250923 08:18:43.443" level="INFO">Test Mode Reset Completed</msg>
<status status="PASS" starttime="20250923 08:18:43.443" endtime="20250923 08:18:43.443"/>
</kw>
<status status="PASS" starttime="20250923 08:18:42.435" endtime="20250923 08:18:43.443"/>
</kw>
<kw name="Close DepFlow Application" library="depflow_keywords">
<doc>Closes the browser and cleans up</doc>
<kw name="Close All Browsers" library="SeleniumLibrary">
<doc>Closes all open browsers and resets the browser cache.</doc>
<status status="PASS" starttime="20250923 08:18:43.443" endtime="20250923 08:18:43.660"/>
</kw>
<status status="PASS" starttime="20250923 08:18:43.443" endtime="20250923 08:18:43.660"/>
</kw>
<status status="PASS" starttime="20250923 08:18:42.435" endtime="20250923 08:18:43.660"/>
</kw>
<doc>Dependency CRUD Operations Test Suite for DepFlow Application</doc>
<status status="FAIL" starttime="20250923 08:18:26.095" endtime="20250923 08:18:43.660"/>
</suite>
<statistics>
<total>
<stat pass="0" fail="1" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="0" fail="1" skip="0">modal</stat>
<stat pass="0" fail="1" skip="0">smoke</stat>
<stat pass="0" fail="1" skip="0">ui</stat>
</tag>
<suite>
<stat pass="0" fail="1" skip="0" id="s1" name="02 Dependency Crud Tests">02 Dependency Crud Tests</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
